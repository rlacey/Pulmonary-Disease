package utils;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Dictionary;
import java.util.HashMap;
import java.util.Set;

import org.apache.commons.math3.linear.MatrixUtils;
import org.apache.commons.math3.linear.RealMatrix;

public class FeatureMatrix {

	private String filename;
	private Tokenizer tokenizer;
	private ArrayList<String> tokens;
	private RealMatrix matrix;
	private int position;

	public FeatureMatrix(String filename) {
		this.filename = filename;
		this.tokenizer = new Tokenizer(filename, true);
		this.tokens = tokenizer.getTokens();
		this.matrix = MatrixUtils.createRealMatrix(linesInFile(), tokens.size());
		this.position = 0;
		populateFeatures();
	}

	private void populateFeatures() {
		try (BufferedReader br = new BufferedReader(new FileReader("src/text/" + filename + ".txt"))) {
			String line = br.readLine();
			while (line != null) {
				if (line.trim() != "") {
					String[] splitString = line.split("[\\p{Punct}\\s]+");
					for (String s : splitString) {
						if (tokens.contains(s)) {
							matrix.setEntry(position, tokens.indexOf(s), 1.0);
							System.out.println(s);
						}
					}
				}
				line = br.readLine();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private int linesInFile() {
		int numberOfLines = 0;
		try (BufferedReader br = new BufferedReader(new FileReader("src/text/" + filename + ".txt"))) {
			String line = br.readLine();
			while (line != null) {
				if (line.trim() != "") {
					numberOfLines++;
				}
				line = br.readLine();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		return numberOfLines;
	}
	
	public RealMatrix getMatrix() {
		return matrix.copy();
	}

}
