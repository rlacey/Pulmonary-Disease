package Main;

import java.util.ArrayList;
import java.util.Arrays;

import org.apache.commons.math3.linear.MatrixUtils;
import org.apache.commons.math3.linear.RealMatrix;

import Algorithms.Perceptron;

import utils.FeatureMatrix;
import utils.LinearSeparator;
import utils.Parser;

public class Main {

	public static void main(String[] args) {
		ArrayList<String> dictionary = Parser.tokenize("train-tweet");
		ArrayList<String> labels = Parser.vectorizeLines("train-answer");
		RealMatrix featureMatrix = FeatureMatrix.construct("train-tweet", dictionary);
		
		System.out.println(dictionary.size());
		
		LinearSeparator separator = Perceptron.train(featureMatrix, labels);
		RealMatrix theta = separator.theta();
		double theta_0 = separator.theta_0();
		
		RealMatrix predictions = Perceptron.classify(featureMatrix, theta, theta_0);
		
		double[] pC= predictions.getRow(0);
		double[] lC = new double[labels.size()];
		for (int i=0; i<labels.size(); i++) {
			lC[i] = Double.parseDouble(labels.get(i));
		}
		
		double correct = 0;
		for (int i=0; i<labels.size(); i++) {
			if (pC[i] - lC[i] <= 0.00000001) {
				correct++;
			}
		}
		double percent = correct / labels.size();
		System.out.println("Correct: " + percent);
//		for(String s: dictionary){
//			  System.out.println(s);
//		}
//		for(String s: labels){
//			System.out.println(s);
//		}
//		System.out.println(featureMatrix);
		
		
		
//		// Create a real matrix with two rows and three columns, using a factory
//		// method that selects the implementation class for us.
//		double[][] matrixData = { {1, 1}, {2, 2}};
//		RealMatrix m = MatrixUtils.createRealMatrix(matrixData);
//		RealMatrix z = MatrixUtils.createRealMatrix(1,3);
//
//		// One more with three rows, two columns, this time instantiating the
//		// RealMatrix implementation class directly.
////		double[][] matrixData2 = { {1d,2d}, {2d,5d}, {1d, 7d}};
//		double[][] matrixData2 = { {2d,2d}, {2d,5d}};
//		RealMatrix n = new Array2DRowRealMatrix(matrixData2);
//
//		// Note: The constructor copies  the input double[][] array in both cases.
//
//		// Now multiply m by n
//		RealMatrix p = m.multiply(n);
//		System.out.println(p.getRowDimension());    // 2
//		System.out.println(p.getColumnDimension()); // 2
//		System.out.println(m);
//		System.out.println(n);
//		System.out.println(p);
//		System.out.println(z.getColumnDimension());
//		
//		HashMap<String, Integer> d = new HashMap<String, Integer>();
//		d.put("hi", 1);
//		d.put("hi", 1);
//		d.put("what", 1);
//		System.out.println(d);
	}

}
