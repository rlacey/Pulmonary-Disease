package Main;

import java.util.ArrayList;


import utils.Dictionary;
import utils.FeatureMatrix;
import utils.Tokenizer;

import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.MatrixUtils;
import org.apache.commons.math3.linear.RealMatrix;

public class Main {

	public static void main(String[] args) {
		Tokenizer tokenizer = new Tokenizer("train-tweet", true);
		ArrayList<String> tokens = tokenizer.getTokens();
//		for(String s: tokens){
//			  System.out.println(s);
//		}
		Dictionary dictionary = new  Dictionary(tokens);
		FeatureMatrix matrix = new FeatureMatrix("train-tweet", dictionary);
//		for (int i=0; i<matrix.rows(); i++) {
//			for (int j=0; j<matrix.cols(); j++) {
//				System.out.println(matrix.get(i,j));
//			}
//		}
		// Create a real matrix with two rows and three columns, using a factory
		// method that selects the implementation class for us.
		double[][] matrixData = { {1d,2d,3d}, {2d,5d,3d}};
		RealMatrix m = MatrixUtils.createRealMatrix(matrixData);

		// One more with three rows, two columns, this time instantiating the
		// RealMatrix implementation class directly.
		double[][] matrixData2 = { {1d,2d}, {2d,5d}, {1d, 7d}};
		RealMatrix n = new Array2DRowRealMatrix(matrixData2);

		// Note: The constructor copies  the input double[][] array in both cases.

		// Now multiply m by n
		RealMatrix p = m.multiply(n);
		System.out.println(p.getRowDimension());    // 2
		System.out.println(p.getColumnDimension()); // 2
	}

}
