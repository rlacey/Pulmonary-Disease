import SVMTools.Classify;
import SVMTools.Data;
import SVMTools.Parameter;
import SVMTools.Problem;
import libsvm.svm;
import libsvm.svm_model;
import libsvm.svm_parameter;
import libsvm.svm_problem;

/**
 * <p>Main class for SVM classification.</p>
 * 
 * <p>Requires data format {class_label, feature_1, feature_2, feature_3, ...}</p>
 * 
 * <p>
 * Features must be aligned between train and test data sets.
 * The same feature extraction methods should be used on both.
 * </p>
 * 
 * <p>
 * reference: http://www.csie.ntu.edu.tw/~cjlin/libsvm/<br>
 * reference: https://github.com/arnaudsj/libsvm
 * </p>
 * 
 * @author Ryan Lacey <rlacey@mit.edu>
 *
 */

public class Main {

	private static final String DEFAULT_PARAM = "-t 2 -c 100";	
	
	private static final int CLASSES = 2;
	
	private static double[][] trainWheeze = {
		{-1, 250.01,4.5693,8.7796,0.12335,0.43649,0.21885,0.43119,0}, 
		{-1, 251.45,4.8823,3.5686,0.051255,0.65457,0.20482,0.22633,0}, 
		{-1, 250,4.3155,7.3794,0.19196,0.63081,0.23172,0.57267,0}, 
		{-1, 274.54,4.7464,3.0396,0.068394,0.5645,0.21068,0.40872,0}, 
		{-1, 261.69,5.2205,1.4601,0.04846,0.41175,0.19155,0.11718,0}, 
		{-1, 250.39,5.6397,8.569,0.42782,0.61494,0.17731,0.79685,0}, 
		{-1, 250.27,6.3476,9.5891,0.22946,0.62127,0.15754,0.62646,0}, 
		{-1, 261.69,5.2205,1.4601,0.04846,0.41175,0.19155,0.11718,0}, 
		{1, 409.22,4.9341,1.9713,0.070157,0.59243,0.20267,0.16584,8}, 
		{1, 337.43,3.222,0.9471,0.043427,0.62684,0.31037,0.19662,2}, 
		{1, 345.02,3.3132,2.2738,0.086441,0.60438,0.30183,0.30066,3}, 
		{1, 409.16,5.019,2.078,0.075087,0.58946,0.19924,0.19675,7}, 
		{1, 275.91,13.849,0.86839,0.017358,0.23903,0.072208,0.12508,10}, 
		{1, 250.04,6.7344,7.0996,0.017235,0.50528,0.14849,0.25965,8}, 
		{1, 250.29,6.6494,7.3681,0.077049,0.48808,0.15039,0.7868,8}, 
		{1, 332.51,8.2701,2.2901,0.11358,0.56478,0.12092,0.29567,14}, 
		{-1, 257.43,2.5541,4.8191,0.14881,0.53854,0.39152,0.35894,0}, 
		{-1, 285.01,1.6959,2.1634,0.28823,0.63299,0.58967,0.29522,0}, 
//		{-1, 306.91,1.597,1.4624,0.22955,0.7325,0.62619,0.23528,0}, 
		{-1, 257.43,2.5541,4.8191,0.14881,0.53854,0.39152,0.35894,0}, 
		{-1, 368.12,2.9186,2.4779,0.056704,0.54567,0.34263,0.19765,0}, 
		{-1, 284.89,1.937,2.6742,0.19254,0.63074,0.51627,0.27772,0}, 
		{-1, 310.65,4.4264,4.5926,0.1407,0.72297,0.22592,0.38985,0}, 
		{-1, 752.82,2.6199,0.23329,0.86844,0.27489,0.38169,0.28698,1}, 
		{-1, 301.78,4.0433,2.7103,0.15221,0.59947,0.24732,0.44974,0}, 
		{-1, 752.82,2.6199,0.23329,0.86844,0.27489,0.38169,0.28698,1}, 
		{-1, 301.86,4.647,3.0085,0.14191,0.59843,0.21519,0.7141,0}
	};
	
	private static double[][] testWheeze = {
		{-1, 306.91,1.597,1.4624,0.22955,0.7325,0.62619,0.23528,0}, 
	};
	
	private static double[][] trainCrackle = {
		{-1, 250.01,2.291,4.5693,2.3191,8.7796,0.12335,0.43649,0.21885,0.43119,3},
		{-1, 251.45,1.5277,4.8823,4.4184,3.5686,0.051255,0.65457,0.20482,0.22633,0},
		{-1, 250,1.5853,4.3155,1.7462,7.3794,0.19196,0.63081,0.23172,0.57267,0},
		{-1, 274.54,1.7715,4.7464,2.4466,3.0396,0.068394,0.5645,0.21068,0.40872,0},
		{-1, 261.69,2.4286,5.2205,8.5335,1.4601,0.04846,0.41175,0.19155,0.11718,0},
		{-1, 250.39,1.6262,5.6397,1.2549,8.569,0.42782,0.61494,0.17731,0.79685,2},
		{-1, 250.27,1.6096,6.3476,1.5963,9.5891,0.22946,0.62127,0.15754,0.62646,0},
		{-1, 261.69,2.4286,5.2205,8.5335,1.4601,0.04846,0.41175,0.19155,0.11718,0},
		{-1, 409.22,1.688,4.9341,6.03,1.9713,0.070157,0.59243,0.20267,0.16584,1},
		{-1, 337.43,1.5953,3.222,5.086,0.9471,0.043427,0.62684,0.31037,0.19662,3},
		{-1, 345.02,1.6546,3.3132,3.326,2.2738,0.086441,0.60438,0.30183,0.30066,1},
		{-1, 409.16,1.6965,5.019,5.0825,2.078,0.075087,0.58946,0.19924,0.19675,2},
		{-1, 275.91,4.1836,13.849,7.9952,0.86839,0.017358,0.23903,0.072208,0.12508,0},
		{-1, 250.04,1.9791,6.7344,3.8513,7.0996,0.017235,0.50528,0.14849,0.25965,0},
		{-1, 250.29,2.0488,6.6494,1.271,7.3681,0.077049,0.48808,0.15039,0.7868,0},
		{-1, 332.51,1.7706,8.2701,3.3822,2.2901,0.11358,0.56478,0.12092,0.29567,0},
		{1, 257.43,1.8569,2.5541,2.786,4.8191,0.14881,0.53854,0.39152,0.35894,6},
		{1, 285.01,1.5798,1.6959,3.3873,2.1634,0.28823,0.63299,0.58967,0.29522,14},
		{1, 306.91,1.3652,1.597,4.2502,1.4624,0.22955,0.7325,0.62619,0.23528,10},
		{1, 257.43,1.8569,2.5541,2.786,4.8191,0.14881,0.53854,0.39152,0.35894,6},
		{1, 368.12,1.8326,2.9186,5.0594,2.4779,0.056704,0.54567,0.34263,0.19765,2},
		{1, 284.89,1.5855,1.937,3.6008,2.6742,0.19254,0.63074,0.51627,0.27772,10},
		{1, 310.65,1.3832,4.4264,2.5651,4.5926,0.1407,0.72297,0.22592,0.38985,5},
		{1, 752.82,3.6378,2.6199,3.4845,0.23329,0.86844,0.27489,0.38169,0.28698,16},
		{1, 301.78,1.6682,4.0433,2.2235,2.7103,0.15221,0.59947,0.24732,0.44974,2},
		{1, 752.82,3.6378,2.6199,3.4845,0.23329,0.86844,0.27489,0.38169,0.28698,16},
		{1, 301.86,1.6711,4.647,1.4004,3.0085,0.14191,0.59843,0.21519,0.7141,10}
	};
	
	private static double[][] testCrackle = {
		{1, 332.51,7.6277,2.2412,0.10475,0.59926,0.1311,0.29567,14,0},
	};
	
	private static void run(double[][] trainData, double[][] testData, String soundtype) {
		Data data = new Data(trainData);
		double[][] normTrain = data.getNormalizedData();
		double[][] normTest = data.normalizeExternalDataset(testData);
		
		svm_parameter parameter = Parameter.generate(DEFAULT_PARAM);		
		
		svm_problem problem = Problem.generate(parameter, normTrain);

		svm_model model = svm.svm_train(problem, parameter);

		System.out.println("\nEvaluating "+soundtype);
		for (int i = 0; i < normTest.length; i++) {
			System.out.printf("Node %d", i);
			Classify.evaluate(normTest[i], CLASSES, model);
		}
	}

	public static void main(String[] args) {
		run(trainWheeze, testWheeze, "Wheeze");
//		run(trainCrackle, testCrackle, "Crackle");
	}
}