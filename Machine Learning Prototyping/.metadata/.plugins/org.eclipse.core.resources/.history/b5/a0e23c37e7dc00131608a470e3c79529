import java.awt.FileDialog;
import java.awt.Frame;
import java.io.BufferedOutputStream;
import java.io.DataOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;

import SVMTools.Classify;
import SVMTools.Parameter;
import SVMTools.Problem;
import libsvm.svm;
import libsvm.svm_model;
import libsvm.svm_parameter;
import libsvm.svm_problem;

public class Main {

	private static final String DEFAULT_PARAM = "-t 2 -c 100";	
	
	private final static int CLASSES = 2;
	
	private static double[][] train = {
//		NORMALIZED
//		 {1, -1, 1},
//		 {1, -0.985765124555, 0.74531835206},
//		 {1, -0.807829181495, 0.850187265918},
//		 {2, 0.722419928826, -1},
//		 {2, 1, 0.970037453184}
//		UNSCALED
//		{1, 79,  435},
//		{1, 81,  401},
//		{1, 106, 415},
//		{2, 321, 168},
//		{2, 360, 431}
		{-1, 100,209.12,1.8887,4.9141,3.0622,0.043553,7.9675,0.092287,0},
		{-1, 147.14,206.94,1.5252,4.2234,0.86904,0.041539,2.4065,0.039705,0},
		{-1, 150.89,225.05,1.3347,4.1762,2.1536,0.061708,6.7384,0.14758,0},
		{-1, 189.48,274.54,2.0066,3.8604,1.1345,0.035255,2.1826,0.055627,0},
		{-1, 156.82,261.69,2.4784,5.0039,0.67926,0.079213,1.3714,0.046449,0},
		{-1, 105.06,224.94,1.4998,6.2432,1.4781,0.056949,6.1529,0.28332,0},
		{-1, 105.3,224.99,1.4888,6.6792,1.4569,0.034575,6.5363,0.14467,0},
		{-1, 156.82,261.69,2.4784,5.0039,0.67926,0.079213,1.3714,0.046449,0},
		{1, 100,409.22,1.6026,4.6398,0.67439,0.085739,1.9524,0.065971,9},
//		{1, 188.15,337.43,1.591,3.1482,0.38518,0.068552,0.76219,0.042433,3},
		{1, 181.19,202.76,1.7371,3.027,1.1055,0.084481,1.9264,0.076888,6},
		{1, 100.02,409.16,1.6106,4.685,0.7024,0.076038,2.0432,0.070091,9},
		{1, 196.15,275.91,2.1553,13.378,0.092028,0.010021,0.5712,0.016768,38}
	};
	
	private static double[][] test = {
//		NORMALIZED
//		{1, -0.985765124555, 0.962546816479},
//		{2, 0.722419928826, -0.797752808989}
//		UNSCALED
//		{1, 81, 430},
//		{2, 321, 195}
		{1, 188.15,337.43,1.591,3.1482,0.38518,0.068552,0.76219,0.042433,3},
	};
	public static int l1 = train.length;
	public static int l2 = train[0].length;
	
	private static double norm(double[] weights, double value) {	
		if(value == weights[2])
			value = weights[0];
		else if(value == weights[3])
			value = weights[1];
		else
			value = weights[0] + (weights[1]-weights[0]) * 
				(value-weights[2])/
				(weights[3]-weights[2]);
		return value;
	}

	public static void main(String[] args) {
		FileDialog dialog = new FileDialog(new Frame(), "Save", FileDialog.SAVE);
		dialog.setVisible(true);
		String filename = dialog.getDirectory() + dialog.getFile();
		try {
			DataOutputStream fp = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(filename)));
			int n = train.length;
			for (int i = 0; i < n; i++) {
				fp.writeBytes(""+train[i][0]);
				for (int j = 1; j < train[0].length; j++) {
					fp.writeBytes(" " + j + ":" + train[i][j]);
				}
				fp.writeBytes("\n");
			}
			fp.close();
		} catch (IOException e) {
			System.err.print(e);
		}
		
		SVMTools.svm_scale s = new SVMTools.svm_scale();
		double[][][] weights = null;
		try {
			weights = s.run(new String[]{filename}, l1, l2, test);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		train = weights[0];
		test = weights[1];
		
		svm_parameter parameter = Parameter.generate(DEFAULT_PARAM);		
		
		svm_problem problem = Problem.generate(parameter, train);

		svm_model model = svm.svm_train(problem, parameter);

		System.out.println("Evaluating...\n");
		for (int i = 0; i < test.length; i++) {
			System.out.printf("Node %d", i);
			Classify.evaluate(test[i], CLASSES, model);
		}
	}
}
