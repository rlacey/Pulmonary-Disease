import java.awt.FileDialog;
import java.awt.Frame;
import java.io.DataOutputStream;

import SVMTools.Classify;
import SVMTools.Parameter;
import SVMTools.Problem;
import libsvm.svm;
import libsvm.svm_model;
import libsvm.svm_parameter;
import libsvm.svm_problem;

public class Main {

	private static final String DEFAULT_PARAM = "-t 2 -c 100";	
	
	private final static int CLASSES = 2;
	
	private static final double[][] train = {
		 {1, -1, 1},
		 {1, -0.985765124555, 0.74531835206},
		 {1, -0.807829181495, 0.850187265918},
		 {2, 0.722419928826, -1},
		 {2, 1, 0.970037453184}
	};
	
	private static final double[][] test = {
		{1, -0.985765124555, 0.962546816479},
		{2, 0.722419928826, -0.797752808989}
	};

	public static void main(String[] args) {
		FileDialog dialog = new FileDialog(new Frame(),"Save",FileDialog.SAVE);
		dialog.setVisible(true);
		String filename = dialog.getDirectory() + dialog.getFile();
		if (filename == null) return;
		try {
			DataOutputStream fp = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(filename)));
			int n = point_list.size();
			for(int i=0;i<n;i++)
			{
				point p = point_list.elementAt(i);
				fp.writeBytes(p.value+" 1:"+p.x+" 2:"+p.y+"\n");
			}
			fp.close();
		} catch (IOException e) { System.err.print(e); }
		
		
		svm_parameter parameter = Parameter.generate(DEFAULT_PARAM);		
		
		svm_problem problem = Problem.generate(parameter, train);

		svm_model model = svm.svm_train(problem, parameter);

		System.out.println("Evaluating...\n");
		for (int i = 0; i < test.length; i++) {
			System.out.printf("Node %d", i);
			Classify.evaluate(test[i], CLASSES, model);
		}
	}
}
